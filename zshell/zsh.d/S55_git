#!/bin/zsh
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# The following implements a caching mechanism for git information.
# The RPROMPT executes get_git_bprompt_info() and include the output...
#
#   setopt prompt_subst
#   RPROMPT="$(get_git_prompt_info)"
#
__ZSH_GIT_DIR=
__ZSH_GIT_BRANCH=
__ZSH_GIT_STATE=
__ZSH_GIT_TS=0
__ZSH_GIT_VARS_INVALID=1

# get the name of the branch we are on
parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1) -- /'
}

# http://blog.madism.org/index.php/2008/05/07/173-git-prompt
new_parse_git_branch() {
  local force=$1

  local git_dir branch
  psvar=()
  git_dir=$(git rev-parse --git-dir 2> /dev/null)
  if [[ -z "$git_dir" ]] ; then
    __ZSH_GIT_DIR=
    return
  fi

  if [[ "$os" == "linux-gnu" ]]; then
    local new_stamp=$(stat --printf='%Y' "$git_dir/HEAD")
  else
    local new_stamp=$(stat -f '%m' "$git_dir/HEAD")
  fi

  [[ "$force" == "0" && "$__ZSH_GIT_TS" == "$new_stamp" ]] && return

  # rewritten by Thomas Ritz <thomas(at)galaxy-ritz(dot)de>
  __ZSH_GIT_STATE=
  if [[ -d "$git_dir/rebase-apply" ]] ; then
    if [[ -f "$git_dir/rebase-apply/rebasing" ]] ; then
      __ZSH_GIT_STATE="rebase"
    elif [[ -f "$git_dir/rebase-apply/applying" ]] ; then
      __ZSH_GIT_STATE="am"
    else
      __ZSH_GIT_STATE="am/rebase"
    fi
    branch="$(git symbolic-ref HEAD 2>/dev/null)"
  elif [[ -f "$git_dir/rebase-merge/interactive" ]] ; then
    __ZSH_GIT_STATE="rebase -i"
    branch="$(cat "$git_dir/rebase-merge/head-name")"
  elif [[ -d "$git_dir/rebase-merge" ]] ; then           
    __ZSH_GIT_STATE="rebase -m"
    branch="$(cat "$git_dir/rebase-merge/head-name")"
  elif [[ -f "$git_dir/MERGE_HEAD" ]] ; then             
    __ZSH_GIT_STATE="merge"
    branch="$(git symbolic-ref HEAD 2>/dev/null)"
  else                                             
    [[ -f "$git_dir/BISECT_LOG" ]] && __ZSH_GIT_STATE="bisect"
    branch="$(git symbolic-ref HEAD 2>/dev/null)" || \
      branch="$(git describe --exact-match HEAD 2>/dev/null)" || \
      branch="$(cut -c1-7 "$git_dir/HEAD")..."
  fi                                              

  if [[ "$os" == "linux-gnu" ]]; then
    __ZSH_GIT_FULL_DIR=$(readlink -f ${git_dir:h})
  else
    __ZSH_GIT_FULL_DIR=$(realpath ${git_dir:h})
  fi
  
  __ZSH_GIT_DIR="${__ZSH_GIT_FULL_DIR/$HOME/~}"
  __ZSH_GIT_BRANCH="${branch#refs/heads/}"
  __ZSH_GIT_TS=$new_stamp
}


zsh_git_invalidate_vars() {
  __ZSH_GIT_VARS_INVALID=1
}

zsh_git_compute_vars() {
  new_parse_git_branch $1
  __ZSH_GIT_VARS_INVALID=0
}

# on each chdir update the cached git variable(s)
preexec_functions+='zsh_git_preexec_update_vars'
chpwd_functions+='zsh_git_chpwd_update_vars'

zsh_git_chpwd_update_vars() {
  zsh_git_compute_vars 1
}

zsh_git_preexec_update_vars() {
  case "$(history $HISTCMD)" in 
    *git*)  zsh_git_invalidate_vars ;;
    *)      [[ "$__ZSH_GIT_VARS_INVALID" == '0' ]] && return ;;
  esac
  zsh_git_compute_vars 1
}

# this function returns the current git branch
# it takes as argument a string with printf like arguments:
#   '%P'     path to top of repository
#   '%p'     path to top of repository, with s/$HOME/~/
#   '%b'     current branch
#   '%s'     state of rebase/merge/bisect/am
#   '%%'     a '%' character
# providing no arguments is equivalent to "%p %b %s".
get_git_prompt_info() {
  zsh_git_compute_vars $__ZSH_GIT_VARS_INVALID
  [[ -n "$__ZSH_GIT_DIR" ]] || return

  local def fmt res
  def='%p %b %s'
  fmt=$@
  res=${fmt:-$def}
  res=${res//\%P/$__ZSH_GIT_FULL_DIR}
  res=${res//\%p/$__ZSH_GIT_DIR}
  res=${res//\%b/$__ZSH_GIT_BRANCH}

  local state="$__ZSH_GIT_STATE"
  if [[ -n "$state" ]] ; then
    state="$state "
#
# NOTE: This code take a long time to execute on large repos,
#       but can show if the repo is dirty or not.  It cannot be 
#       cached because it's too hard to figure out which commands
#       change this state.  Enable it if you work on only small
#       repositories.
#
#elif ! git diff --quiet ; then
#        state="dirty "
  fi
  
  res=${res//\%s/$state}
  res=${res//\%%/%}
  echo -n "${res}"
}

git-what-merged () {
  commit=${1:-HEAD}
  base=$(git merge-base "$commit^1" "$commit^2") 
  git log "$base..$commit^2"
}

#--------------------------------------------------
#    Generic function that gives gpp, gull, etc.
#    the ability to specify branch, directory, etc.
#--------------------------------------------------
__git_exec_file_move()
{
  local remote=""
  fn_exists __git_ps1
  if [ $? -eq 0 ]; then
    local branch=$(__git_ps1 "%s")
  else
    local branch=$(get_git_prompt_info "%b")
  fi

  local command=$1
  shift

  if [ -z "$branch" ]; then
    return 1
  fi

  while [ "$1" != "" ]; do
    case $1 in
      -b | --branch )         
        branch=$2
        shift
        ;;
      -h | --help )
        echo "Usage: git ${command} [[-b branch ] | [-h]]"
        return
        ;;
      * )                     
        ;;
    esac
    shift
  done

  if [ -z "$branch" ]; then
    echo "You provided the -b flag, but did not specify a branch"
    return
  fi

  remote=$(git config branch.${branch}.remote)
  if [ -z "$remote" ]; then
    echo "There is no matching remote for branch '${branch}' in your .git/config file.  Defaulting to remote 'origin'."
    remote="origin"
  fi

  git $command $remote $branch
}

#--------------------------------------------------
#    Checks all Git repositories to see if
#    anything needs to be commited
#--------------------------------------------------
geck()
{
  if [ "$#" -gt 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "Usage: geck [path/to/git/repositories]" >&2
    return 1
  fi
  
  local path=${1:-"$HOME/Code/git-repositories"}
  local status=""
  for folder in $(ls $path)
  do
    status=$(git --git-dir=$path/$folder/.git --work-tree=$path/$folder status | grep "nothing to commit" 2> /dev/null)
    stash=$(git --git-dir=$path/$folder/.git --work-tree=$path/$folder stash list 2> /dev/null)
    if [ -z "$status" ]; then
      echo -e "$path/$folder: \033[00;31mNeeds a commit\033[00m"
    else
      if [ -n "$stash" ]; then
        echo -e "$path/$folder: \033[00;31mStuff has been stashed\033[00m"
      else
        echo -e "$path/$folder: \033[00;32mNothing to do\033[00m"
      fi
    fi
  done
}

#--------------------------------------------------
#    Defines a "branch" block in a .git/config file
#--------------------------------------------------
gconfbr()
{
  if [ "$#" -ne 2 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "Usage: gconfbr [remote] [branch]" >&2
    return 1
  fi
  
  fn_exists __git_ps1
  if [ $? -eq 0 ]; then
    local is_git=$(__git_ps1 "%s")
  else
    local is_git=$(get_git_prompt_info "%b")
  fi
  if [ -n "$is_git" ]; then
    cat >> .git/config <<BLOCK
[branch "${2}"]
        remote = ${1}
        merge = refs/heads/${2}
BLOCK
  fi
}

#--------------------------------------------------
#    Fetches, diffs, and prompts user to merge
#    (using current branch and it's associated 
#    remote, if present)
#--------------------------------------------------
getch()
{
  __git_exec_file_move fetch "$@"
  git diff -R FETCH_HEAD
  
  local needs_merge=$(git diff -R FETCH_HEAD | grep diff 2> /dev/null)
  if [ -n "$needs_merge" ]; then
    echo -n 'Do you want to merge? (y/n) [n]: '
    read -e merge_option
    if [ "$merge_option" == "y" ]; then
      git merge FETCH_HEAD
    fi
  fi
}

#--------------------------------------------------
#    Easy wrapper for git clone
#--------------------------------------------------
glone()
{
  if [ "$#" -ne 2 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "Usage: glone [host] [repo-name]" >&2
    return 1
  fi
 
  git clone git@${1}:${2}
}

#--------------------------------------------------
#    Does a git pp on the current branch (using
#    it's associated remote, if present)
#--------------------------------------------------
gpp()
{
  __git_exec_file_move pp "$@"
}

#--------------------------------------------------
#    Does a git pull on the current branch (using
#    it's associated remote, if present)
#--------------------------------------------------
gull()
{
  __git_exec_file_move pull "$@"
}

#--------------------------------------------------
#    Does a git push on the current branch (using
#    it's associated remote, if present)
#--------------------------------------------------
gush()
{
  __git_exec_file_move push "$@"
}

# call it the first time
zsh_git_compute_vars
